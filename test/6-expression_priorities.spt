language Scala
start symbol Expr

test prefix > application [[
	!(a + b)
]] parse to PrefixExpr(_, _)

test infix > postfix [[
	if (a & a) b
	else a & a
]] parse to IfElseExpr(InfixNoLExpr(_, _, _), _, InfixExpr(_, _, _))

test [[
	-sin(x)
]] parse to PrefixExpr(_, AppExpr(_, _))

test [[
	!a && !b
]] parse to InfixExpr(PrefixExpr(_, _), _, PrefixExpr(_, _))

test [[
	a b c + d
]]

test [[
	a && b || c ^^ d and e
]] parse to InfixExpr(InfixExpr(_, "||", _), "and", _)

test [[
	a && b || (c ^^ d and e)
]] parse to InfixExpr(_, "||",  _)

test [[
	negate sin(x)
]] parse to InfixExpr(_, _, _)

test [[
	3 + 2 + 7
]] parse to InfixExpr(InfixExpr(_, _, _), _, _)

test [[
	foo = bar
]] parse to AssignmentExpr(_, _, _)

test if else > match [[
	if (cond) f() else
	v match {
		case _ =>
	}
]] parse to IfElseExpr(_, _, _)

test string literals are parsed greedy in expr context [[
	"\"%s\"".f
]] parse to DesignatorExpr(_, _)


test L of int can not be confused with operator [[
	1000L foo
]] parse to PostfixExpr(Int("1000L"), Id("foo"))

test [[
	if (c) f(x) = res
]] parse to IfExpr(_, _)
