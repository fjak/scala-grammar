language Scala
start symbol Expr

test prefix > application [[
	!(a + b)
]] parse to PrefixExpr(_, _)

test infix > postfix [[
	if (a & a) b
	else a & a
]] parse to IfElseExpr(InfixExpr(_, _, _), _, InfixExpr(_, _, _))

test [[
	-sin(x)
]] parse to PrefixExpr(_, AppExpr(_, _))

test [[
	!a && !b
]] parse to InfixExpr(PrefixExpr(_, _), _, PrefixExpr(_, _))

test [[
	a b c + d
]]

test [[
	a && b || c ^^ d and e
]] parse to InfixExpr(InfixExpr(_, "||", _), "and", _)

test [[
	a && b || (c ^^ d and e)
]] parse to InfixExpr(_, "||",  _)

test [[
	negate sin(x)
]] parse to InfixExpr(_, _, _)

test [[
	3 + 2 + 7
]] parse to InfixExpr(InfixExpr(_, _, _), _, _)

test [[
	foo = bar
]] parse to AssignmentExpr(_, _)

test if else > match [[
	if (cond) f() else
	v match {
		case _ =>
	}
]] parse to IfElseExpr(_, _, _)

test string literals are parsed greedy in expr context [[
	"\"%s\"".f
]] parse to DesignatorExpr(_, _)


test L of int can not be confused with operator [[
	1000L foo
]] parse to PostfixExpr(Int("1000L"), Id("foo"))

test [[
	if (c) f(x) = res
]] parse to IfExpr(_, _)

test empty block statements [[
	{;;;;}
]]

test [[
	if (cond)
	  qual.foo = bar
]]

test [[
	if (c) () => foo()
	else () => bar()
]]

test [[
	{
		if (c)
		  return
		foo
	}
]] parse to BlockExpr(Block([_, _]))

test [[
	if (c)
	  if (c) t
	  else f
]] parse to IfExpr(_, _)


test [[
	{
		val v = 42
		t &&
			t}
]]

test [[
	1.2e-10f append -2.1e+100d
]]

test assign op has lowest precedence [[
	a ++= foo filter f
]] parse to InfixExpr(_, "++=", InfixExpr(_, "filter", _))

test right assoc operations [[
	1 :: 2 :: Nil
]] parse to InfixExpr(Int("1"), "::", InfixExpr(Int("2"), "::", Id("Nil")))

test [[
	+a + +b + +c
]] parse to InfixExpr(
              InfixExpr(
                PrefixExpr("+", Id("a")),
                "+",
                PrefixExpr("+", Id("b"))),
              "+",
              PrefixExpr("+", Id("c")))

test [[
	+a :: -b :: c
]] parse to InfixExpr(
              PrefixExpr("+", Id("a")),
              "::",
              InfixExpr(
                PrefixExpr("-", Id("b")),
                "::",
                Id("c")))

test [[
	!!b
]] parse to PostfixExpr(Id("!!"), Id("b"))

test [[
	a !(b)
]]

test [[
	! !true
]] parse fails

test [[
	! (!true)
]]

test [[
	! & !
]] parse to PostfixExpr(PrefixExpr("!", Id("&")), Id("!"))

test [[
	!
	a
]] parse fails

test [[
	!(
	a)
]]

test [[
	(!
	a)
]]

// TODO: Fixme
test right assoc letterop [[
	1 colon_:: 2 colon_:: Nil
]] parse to InfixExpr(Int("1"), "colon_::", InfixExpr(Int("2"), "colon_::", Id("Nil")))
