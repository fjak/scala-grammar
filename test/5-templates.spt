language Scala
start symbol TemplateBody

test InfixExpr > PostfixExpr in template body [[
{
	_
	foo &&
	bar
}
]]

test InfixExpr > PostfixExpr in template body with function statement [[
{
	def g = _
	def f = foo &
	bar
}
]]

test InfixExpr > PostfixExpr in block expression [[
{
	{
		_
		foo &&
		bar
	}
}
]]

test InfixExpr > PostfixExpr in block expression with function statement [[
{
	{
		def g = _
		def f = foo &
		bar
	}
}
]]

test InfixExpr > PostfixExpr in template body with ; statements [[
{
    _
	foo &&
	bar;
}
]]

test InfixExpr > PostfixExpr in ; block expression [[
{
	{
		_
		foo &&
		bar;
	}
}
]]

test no confusion with EOCBlockStatSemi [[
{
	{
      val a = v
      val b = (_)+columns.map(_.indexDesc).comma
    }
}
]]

test empty template statements [[
{
	;;;
}
]]

test [[
{
	def ::[B >: A] (x: B): List[B] =
		new scala.collection.immutable.::(x, this)
}
]]

test id self type [[
{
	foo => bar
}
]] parse to SelfTypeTemplateBody(_, _)

test this self type [[
{
	this: Type =>
}
]]

test wildcard self type [[
{
	_: Type =>
}
]] parse to SelfTypeTemplateBody(_, _)
