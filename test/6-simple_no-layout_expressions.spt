language Scala
start symbol NoLExpr

/* Literal */
test literal Expression [[
	42
]] parse to Int(_)

test long Expression [[
	42L
]] parse to Int(_)

test id Expression [[
	foo
]]

/* Path */
test simple path [[
	some.foo
]]

test path [[
	scala.collection.mutable.Map
]] parse to Path(_)


/* Wildcard */
test wildcard Expression [[
	_
]] parse to WildcardExpr


/* Tuple */
test braced Expression [[
	(23)
]] parse to TupleExpr([Int("23")])

test tuple Expression [[
	(23, 42)
]] parse to TupleExpr(_)

test recursive brace Expression [[
	(((42)))
]] parse to TupleExpr([TupleExpr([TupleExpr(_)])])


/* Designator */
test designator [[
	f(23).foo.bar
]] parse to DesignatorExpr(_, _)

test designator Expression allows blocks [[
	{Person("John", "Doe")}.first_name
]]

test designator of new class instantiation [[
	new Person().default_name
]] parse to DesignatorExpr(_, _)

/* Type Application */
test type application [[
	42 [Float]
]] parse to TypeApplication(_, _)


/* Application */
test application [[
	f(42)
]] parse to AppExpr(_, _)

test multiple arg lists [[
	f(23)(42)
]] parse to AppExpr(AppExpr(_, _), _)

test application spread layout [[
	f
	(42)
]] parse to AppExpr(_, _)

test application valid layout [[
	f (
		42
	)
]] parse to AppExpr(_, _)

test application wildcard target [[
	_(23)
]] parse to AppExpr(WildcardExpr, _)

test application literal target [[
	42(23)
]] parse to AppExpr(Int(_), _)

test application path target [[
	scala.collection.mutable.Map()
]] parse to AppExpr(Path(_), _)

test application block target is invalid [[
	{foo}(23)
]] parse fails

test application block application target [[
	Map {'x -> 23} ('x)
]] parse to AppExpr(BlockAppExpr(_, _), _)

test multiple arg lists spread layout [[
	f(23)
	(42)
]] parse to AppExpr(_, _)

test multiple arg lists valid layout [[
	f  (
		23)  (
			42)
]] parse to AppExpr(AppExpr(_, _), _)

test block argument [[
	f {23}
]] parse to BlockAppExpr(_, _)

test block argument valid layout [[
	f
	{23}
]] parse to BlockAppExpr(_, _)

test block argument spread layout [[
	f
	
	{23}
]] parse to BlockAppExpr(_, _)


/* Instantiation */
test simple class instantiation [[
	new Foo()
]] parse to NewClassExpr(_)

test argument less class instantiation [[
	new Foo
]] parse to NewClassExpr(_)

test multi argument list class instantiation [[
	new Foo(42)(23)
]] parse to NewClassExpr(_)

test class instantiation layout [[
	new
	
	Foo(42)
]] parse to NewClassExpr(_)

test template instantiation [[
	new { def f() = println("42")}
]] parse to NewTemplateExpr(_)

test empty template instantiation [[
	new {}
]] parse to NewTemplateExpr(_)

test template instantiation layout [[
	new
	
	{}
]] parse to NewTemplateExpr(_)

test new fqn class instantiation [[
	new scala.collection.mutable.Map
]] parse to NewClassExpr(_)


/* Blocks */
test block [[
	{ println("Hello") }
]] parse to BlockExpr(_)

test block layout [[
	{
		
		println("Hello")
		
		println("You")
		
	}
]] parse to BlockExpr(_)

/* Eta Expansion */
test eta expansion [[
	f _
]] parse to EtaExpansionExpr(_)

test eta expansion spread layout [[
	f
	_
]] parse to EtaExpansionExpr(_)

test block eta expansion [[
	{ def f(n: Int) = println(n) ; f } _
]] parse to EtaExpansionExpr(_)

test DesignatorExpr on Int [[
	10000.toFloat
]] parse to DesignatorExpr(Int(_), _)

test DesignatorExpr on Float [[
	10000.000.toInt
]] parse to DesignatorExpr(Float(_), _)
