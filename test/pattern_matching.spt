language Scala
start symbol Expr

test | is pattern disjunctor [[
	v match {
		case A | B =>
	}
]] parse to MatchExpr(_, [CaseClause(DisjunctPattern(_, _), _, _)])

test left assoc pattern operations [[
	v match {
		case a :: b :: c =>
	}
]] parse to MatchExpr(_, [
	CaseClause(
		InfixPattern(
			InfixPattern(
				StableIdPattern(SimpleStableId(Id("a"))),
				Id("::"),
				StableIdPattern(SimpleStableId(Id("b")))),
			Id("::"),
			StableIdPattern(SimpleStableId(Id("c")))), _, _)])
			
test constructor pattern [[
	v match {
		case CaseClass(b) =>
	}
]] parse to MatchExpr(_, [CaseClause(ConstructorPattern(_, _), _, _)])

test typed pattern [[
	v match {
		case b: Bool =>
	}
]] parse to MatchExpr(_, [CaseClause(TypedPattern(_, _), _, _)])

test pattern list [[
	v match {
		case null => false
	  	case b : Boolean => b
	  	case s : String => {
		    val sl = s.toLowerCase
		    if (sl.length == 0) false
		    else {
		      if (sl.charAt(0) == 't') true
		      else if (sl == "yes") true
		      else toInt(s) != 0
	    	}
	  	}
		case None() => false
		case Empty | Failure(_, _, _) => false
		case Full(n) => toBoolean(n)
		case Some(n) => toBoolean(n)
		case x :: xs => toBoolean(x)
		case o => toBoolean(o.toString)
	}
]] parse to MatchExpr(_, [_, _, _, _, _, _, _, _, _])

test same line multiple clauses [[
	v match { case foo => bar case baz => bau }
]]
