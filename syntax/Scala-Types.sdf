module Scala-Types

imports
	Scala-Whitespace
	Scala-Paths
	Scala-Annotations
	Scala-BasicDeclarations

exports
	context-free syntax
		FunctionArgTypes "=>" Type  -> Type {"FunctionType", prefer}
		InfixType                   -> Type
		InfixType ExistentialClause -> Type {"ExistentialType"}
		
		SimpleType TypeArgs -> SimpleType {"ParameterizedType"}
		SimpleType "#" Id   -> SimpleType {"TypeProjection"}
		StableId            -> SimpleType {"Type"}
		Path "." "type"     -> SimpleType {"SingletonType"}
		"(" {Type ","}+ ")" -> SimpleType {"TupleType"}
		"_"                 -> SimpleType {"WildcardType"}
		
		"[" {Type ","}+ "]" -> TypeArgs {"TypeArgs"}
		
		SimpleType             -> AnnotType
		SimpleType Annotation+ -> AnnotType {"AnnotType", layout("1.last.line == 2.first.line")}
		
		"{" RefineStatSemi* "}" -> Refinement {"Refinement"}
		
		RefineStat ";" -> RefineStatSemi {"SemiRefineStatSemi"}
		RefineStat EOL -> RefineStatSemi {"RefineStatSemi", enforce-newline, prefer}
		RefineStat EOB -> RefineStatSemi {"EOBRefineStatSemi", avoid}
		
		Dcl            -> RefineStat
		"type" TypeDef -> RefineStat {"TypeRefineStat"}

		AnnotType                   -> CompoundType
		Refinement                  -> CompoundType
		AnnotType With+ Refinement? -> CompoundType {"CompoundType", layout("3.first.line - 2.last.line < num(2)")}
		
		"with" AnnotType -> With {"With"}
		
		"forSome" "{" ExistentialDclSemi+ "}" -> ExistentialClause {"ExistentialClause"}
		
		ExistentialDcl ";" -> ExistentialDclSemi {"SemiExistentialDclSeq"}
		ExistentialDcl EOL -> ExistentialDclSemi {"ExistentialDclSeq", enforce-newline, prefer}
		ExistentialDcl EOB -> ExistentialDclSemi {"EOBExistentialDclSeq"}
		
		"type" TypeDcl -> ExistentialDcl {"ExistentialType"}
		"val"  ValDcl  -> ExistentialDcl {"ExistentialVal"}
		
		CompoundType              -> InfixType
		CompoundType InfixTypeOp+ -> InfixType {"InfixType"}
		
		Id CompoundType -> InfixTypeOp {"InfixTypeOp", layout("2.first.line - 1.last.line < num(2)")}
		

		InfixType                -> FunctionArgTypes
		"(" {ParamType ","}* ")" -> FunctionArgTypes {"FunctionArgType", prefer}

		Type      -> ParamType
		"=>" Type -> ParamType {"ByNameParam"}
		Type "*"  -> ParamType {"RepeatedParam"}
		
		