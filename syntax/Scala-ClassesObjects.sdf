%% §5 Classes and Objects
module Scala-ClassesObjects

imports
	Scala-BasicDeclsDefs
	Scala-Expressions
	Scala-Identifiers
	Scala-Types
	Scala-Whitespace

exports
	context-free syntax
		%% §5.1 – Templates
		EarlyDefs? ClassParents TemplateBody? -> ClassTemplate {"ClassTemplate"}
		EarlyDefs? TraitParents TemplateBody? -> TraitTemplate {"TraitTemplate"}

		Constr WithAnnotType*    -> ClassParents {"ClassParents"}
		AnnotType WithAnnotType* -> TraitParents {"TraitParents"}

		"with" AnnotType         -> WithAnnotType {"WithAnnotType"}

		Id (":" Type)? "=>"  -> SelfType {"SelfType"}
		"this" ":" Type "=>" -> SelfType {"ThisSelfType"}

		%% TODO: Nl
		Nl? "{" SelfType? TemplateStatSemi* "}" -> TemplateBody {"TemplateBody"}

		%% §5.1.1 – Constructor Invocations
		AnnotType ArgumentExprsSeq? -> Constr {"Constr"}

		%% §5.1.6 – Early Definitions
		"{" EarlyDefSemi* "}" "with" -> EarlyDefs {"EarlyDefs"}

		EarlyDef SEMI -> EarlyDefSemi {"EarlyDefSemi"}
		EarlyDef EOL  -> EarlyDefSemi {"EarlyDefSemi", enforce-newline, prefer}
		EarlyDef EOB  -> EarlyDefSemi {"EarlyDefSemi", avoid}

		AnnotationSeq? Modifier* PatVarDef -> EarlyDef {"EarlyDef"}


		%% §5.2 – Modifiers
		LocalModifier  -> Modifier
		AccessModifier -> Modifier
		"override"     -> Modifier {"OverrideModifier"}

		"abstract" -> LocalModifier {"AbstractModifier"}
		"final"    -> LocalModifier {"FinalModifier"}
		"sealed"   -> LocalModifier {"SealedModifier"}
		"implicit" -> LocalModifier {"ImplicitModifier"}
		"lazy"     -> LocalModifier {"LazyModifier"}

		"private" AccessQualifier?   -> AccessModifier {"PrivateModifier"}
		"protected" AccessQualifier? -> AccessModifier {"ProtectedModifier"}

		"[" Id "]"     -> AccessQualifier {"AccessQualifier"}
		"[" "this" "]" -> AccessQualifier {"ThisQualifier"}


		%% §5.3 – Class Definitions
		"class" ClassDef -> TmplDef {"Class"}

		Morphism ConstrAnnotation* AccessModifier? ClassParamClauses? ClassTemplateOpt -> ClassDef {"ClassDef", layout("4.first.line - 1.last.line < num(2)")}

		Id                  -> Morphism
		Id TypeParamClause  -> Morphism {"Polymorph"}

		ClassParamClause                                       -> ClassParamClauses
		"(" "implicit" {ClassParam ","}+ ")"                   -> ClassParamClauses {"ImplicitClassParamClause"}
		ClassParamClause ClassParamClauses                     -> ClassParamClauses {"ClassParamClauses", layout("2.first.line - 1.last.line < num(2)")}

		"(" {ClassParam ","}* ")" -> ClassParamClause {"ClassParamClause"}

		Annotation* Id ":" ParamType Assignment?                 -> ClassParam {"ClassParam"}
		Annotation* Modifier* "val" Id ":" ParamType Assignment? -> ClassParam {"ValClassParam"}
		Annotation* Modifier* "var" Id ":" ParamType Assignment? -> ClassParam {"VarClassParam"}

		"extends" ClassTemplate -> ClassTemplateOpt {"ClassClassTemplateOpt"}
		"extends" TemplateBody  -> ClassTemplateOpt {"TemplateClassTemplateOpt"}
		TemplateBody            -> ClassTemplateOpt
		                        -> ClassTemplateOpt {"EmptyClassTemplateOpt"}


		%% §5.3.1 – Constructor Definitions
		"this" ParamClause ParamClauses "=" ConstrExpr -> FunDef {"ThisExprFunDef"}
		"this" ParamClause ParamClauses ConstrBlock    -> FunDef {"ThisBlockFunDef", layout("4.first.line - 3.last.line < num(2)")}

		"this" ArgumentExprsSeq -> SelfInvocation {"SelfInvocation"}

		SelfInvocation -> ConstrExpr
		ConstrBlock    -> ConstrExpr

		"{" SelfInvocation ";" BlockStatSemi* "}"  -> ConstrBlock {"ConstrBlock"}
		"{" SelfInvocation BlockStatSemi* "}"      -> ConstrBlock {"ConstrBlock", layout("3.first.line - 2.last.line > num(0)")}

		%% §5.3.2 – Case Classes
		"case" "class" ClassDef   -> TmplDef {"CaseClass"}

		%% §5.3.3 – Traits
		"trait" TraitDef -> TmplDef {"Trait"}

		Id TypeParamClause? TraitTemplateOpt -> TraitDef {"TraitDef"}

		"extends" TraitTemplate -> TraitTemplateOpt {"TraitTraitTemplateOpt"}
		"extends" TemplateBody  -> TraitTemplateOpt {"TemplateTraitTemplateOpt"}
		TemplateBody            -> TraitTemplateOpt
		                        -> TraitTemplateOpt {"EmptyTraitTemplateOpt"}

		%% §5.4 – Object Definitions
		"case" "object" ObjectDef -> TmplDef {"CaseObject"}
		"object" ObjectDef        -> TmplDef {"Object"}

		Id ClassTemplateOpt -> ObjectDef {"ObjectDef"}
