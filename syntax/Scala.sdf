module Scala

imports Lexical

exports

  context-free start-symbols

	CompilationUnit

  context-free syntax
	StableId         -> Path
	(Id ".")? "this" -> Path {"This"}

	Id                                          -> StableId
	Path "." Id                                 -> StableId {"Path"}
	%% (Id ".")? "super" ClassQualifier? "." Id -> StableId {"SuperId"}

	{Id "."}+ -> QualId {"QualId"}
	
	"import" {ImportExpr ","}+ -> Import {"Import"}

	%% StableId "." ImportSelectors -> ImportExpr {"SelectorsImportExpr"}
	StableId "." "_"             -> ImportExpr {"WildcardImportExpr"}
	StableId "." Id              -> ImportExpr {"IdImportExpr"}
	
	TopStat -> TopStatSeq {"SingleTopStatSeq"}
	TopStat ";" TopStatSeq -> TopStatSeq {"SemiTopStatSeq"}
			
	%% (Annotation Nl?)* Modifier* TmplDef -> TopStat {"TopStat"}
	Import                                 -> TopStat
	Packaging                              -> TopStat
	%% PackageObject                       -> TopStat
			
	"{" TopStatSeq? "}" -> TopStat {"Block"}
	
	"package" QualId ";" -> PackageDeclaration {"SemiPackageDeclaration"}
	
	PackageDeclaration* TopStatSeq -> CompilationUnit {"CompilationUnit"}
	
  syntax
	<TopStat-CF> <SPACE?-LEX> <NL+-LEX> <SPACE?-LEX> <TopStatSeq-CF> -> <TopStatSeq-CF> {"NlTopStatSeq"}	
	"package" <LAYOUT?-CF> <QualId-CF> <SPACE?-LEX> <NL-LEX> <SPACE?-LEX> "{" <LAYOUT?-CF> <TopStatSeq-CF> <LAYOUT?-CF> "}" -> <Packaging-CF> {cons("NlPackaging")}
	"package" <LAYOUT?-CF> <QualId-CF> <SPACE?-LEX> "{" <LAYOUT?-CF> <TopStatSeq-CF> <LAYOUT?-CF> "}" -> <Packaging-CF> {cons("SameLinePackaging")}
	"package" <LAYOUT?-CF> <QualId-CF> <SPACE?-LEX> <NL-LEX> -> <PackageDeclaration-CF> {"NlPackageDeclaration"}



