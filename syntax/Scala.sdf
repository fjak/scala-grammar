%% Grammar for the Scala language
module Scala

imports Lexical

exports

  context-free start-symbols
  
    CompilationUnit

  context-free syntax
  	
  	IntegerLiteral            -> Literal {"PosInt"}
  	"-" IntegerLiteral        -> Literal {"NegInt"}
  	FloatingPointLiteral      -> Literal {"PosFloat"}
  	"-" FloatingPointLiteral  -> Literal {"NegFloat"}
  	BooleanLiteral            -> Literal {"Bool"}
  	CharacterLiteral          -> Literal {"Char"}
  	StringLiteral             -> Literal {"String"}
  	SymbolLiteral             -> Literal {"Symbol"}
  	"null"                    -> Literal {"Null"}
  
  	{Id "."}+ -> QualId {"QualId"}
  	
  	{Id ","}+ -> Ids {"Ids"}
  	
  	StableId         -> Path
  	(Id ".")? "this" -> Path {"ThisPath"}
  	
  	Id          							 -> StableId
  	Path "." Id 							 -> StableId {"PathId"}
  	(Id ".")? "super" ClassQualifier? "." Id -> StableId {"SuperId"}
  	
  	"[" Id "]" -> ClassQualifier {"ClassQualifier"}
  	
  	FunctionArgTypes "=>" Type -> Type {"FunctionType"}
  	InfixType ExistentialClause? -> Type {"Type"}
  	
  	InfixType                -> FunctionArgTypes
  	"(" {ParamType ","}* ")" -> FunctionArgTypes {"FunctionArgTypes"}
  	
  	"forSome" "{" ExistentialDcl (ExistentialDcl Semi)* "}" -> ExistentialClause {"ForSome"}
  	
  	"type" TypeDcl -> ExistentialDcl {"TypeDecl"}
  	"val" ValDcl   -> ExistentialDcl {"ValDecl"}
  	
  	CompoundType (Id Nl? CompoundType)* -> InfixType {"InfixType"}
  	
  	{AnnotType "with"}+ Refinement? -> CompoundType {"CompoundType"}
  	Refinement                      -> CompoundType
  	
  	SimpleType Annotation* -> AnnotType {"AnnotType"}
  	
  	SimpleType TypeArgs -> SimpleType {"TypeWithArgs"}
  	SimpleType "#" Id   -> SimpleType {"HashType"}
  	StableId            -> SimpleType 
  	Path "." "type"     -> SimpleType {"TypeSuffix"}
  	"(" {Type ","}+ ")" -> SimpleType {"Types"}
  	
  	"[" {Type ","}+ "]" -> TypeArgs {"TypeArgs"}
  	
  	Nl? "{" RefineStat (Semi RefineStat)* "}" -> Refinement {"Refinement"}
  	
  	Dcl            -> RefineStat
  	"type" TypeDef -> RefineStat {"RefineStat"}
  	
  	Type -> TypePat
  	
  	":" InfixType   -> Ascription {"InfixAscription"}
  	":" Annotation+ -> Ascription {"AnnotationsAscription"}
  	":" "_" "*"     -> Ascription {"UnderStarAscription"}
  	
  	Bindings "=>" Expr -> Expr {"BindingsExpr"}
  	"implicit" Id "=>" Expr -> Expr {"ImplicitIdExpr"}
  	Id "=>" Expr -> Expr {"IdExpr"}
  	"_" "=>" Expr -> Expr {"WildcardExpr"}
  	Expr1                                       -> Expr
  	
	"if" "(" Expr ")" Nl* Expr Semi? "else" Expr?                           -> Expr1 {"IfElse"}
	"if" "(" Expr ")" Nl* Expr                                              -> Expr1 {"If"}
	"while" "(" Expr ")" Nl* Expr                                           -> Expr1 {"While"}
	"try" "{" Block "}" ("catch" "{" CaseClause+ "}") ("finally" Expr)      -> Expr1 {"TryCatchFinally"}
	"try" "{" Block "}" ("catch" "{" CaseClause+ "}")					    -> Expr1 {"TryCatch"}
	"try" "{" Block "}"														-> Expr1 {"Try"}
	"do" Expr Semi? "while" "(" Expr ")"                                    -> Expr1 {"DoWhile"}
	"for" "(" Enumerators ")" Nl* "yield" Expr  							-> Expr1 {"ForYieldRoundBraces"}
	"for" "{" Enumerators "}" Nl* "yield" Expr							    -> Expr1 {"ForYieldCurlyBraces"}
	"for" "(" Enumerators ")" Nl* Expr                                      -> Expr1 {"ForRoundBraces"}
	"for" "{" Enumerators "}" Nl* Expr  						            -> Expr1 {"ForCurlyBraces"}
	
	"throw" Expr                                                            -> Expr1 {"Throw"}
	"return" Expr?                                                          -> Expr1 {"Return"}
	(SimpleExpr ".")? Id "=" Expr                                           -> Expr1 {"Assign"}
	SimpleExpr1 ArgumentExprs "=" Expr                                      -> Expr1 {"ArgAssign"}
	PostfixExpr                                                             -> Expr1
	PostfixExpr Ascription                                                  -> Expr1 {"PostfixAscription"}
	PostfixExpr "match" "{" CaseClause+ "}"                                 -> Expr1 {"Match"}

  	InfixExpr Id Nl? -> PostfixExpr {"PostfixExprId"}
  	InfixExpr        -> PostfixExpr {"PostfixExpr"}
  	
  	PrefixExpr 				   -> InfixExpr
  	InfixExpr Id Nl? InfixExpr -> InfixExpr {"InfixExpr"}
  	
  	"-" SimpleExpr -> PrefixExpr {"MinusPrefixExpr"}
  	"+" SimpleExpr -> PrefixExpr {"PlusPrefixExpr"}
  	"~" SimpleExpr -> PrefixExpr {"TildePrefixExpr"}
  	"!" SimpleExpr -> PrefixExpr {"ExclamationPrefixExpr"}
  	
  	"new" ClassTemplate 				 -> SimpleExpr {"NewClassTemplate"}
  	"new" TemplateBody				     -> SimpleExpr {"NewTemplateBody"}
  	BlockExpr                            -> SimpleExpr
  	SimpleExpr1 "_"                      -> SimpleExpr {"SimpleBlank"}
  	SimpleExpr1                          -> SimpleExpr
  	
	Literal                   -> SimpleExpr1
	Path                      -> SimpleExpr1
	"_"                       -> SimpleExpr1 {"Wildcard"}
	"(" {Expr ","}* ")"       -> SimpleExpr1 {"Exprs"}
	SimpleExpr "." Id         -> SimpleExpr1 {"QualExpr"}
	SimpleExpr TypeArgs       -> SimpleExpr1 {"TypeArgExpr"}
	SimpleExpr1 ArgumentExprs -> SimpleExpr1 {"ArgExpr"}
  	
  	
  	"(" {Expr ","}* ")" 							-> ArgumentExprs {"ArgExprs"}
  	"(" {Expr ","}+ "," PostfixExpr ":" "_" "*" ")" -> ArgumentExprs {"ArgExprsPostfix"}
  	"(" PostfixExpr ":" "_" "*" ")"                 -> ArgumentExprs {"ArgOnlyPostfix"}
  	Nl? BlockExpr 								    -> ArgumentExprs {"BlockArg"}
  	
  	"{" CaseClause+ "}" -> BlockExpr {"BracesClauses"}
  	"{" Block "}"       -> BlockExpr {"BracesBlock"}
  	
  	(BlockStat Semi)* ResultExpr? -> Block {"Block"}
  	
	Import                             -> BlockStat
	Annotation* "implicit" Def         -> BlockStat {"ImplicitDefBlock"}
	Annotation* "lazy" Def			   -> BlockStat {"LazyDefBlock"}
	Annotation* Def					   -> BlockStat {"DefBlock"}
	Annotation* LocalModifier* TmplDef -> BlockStat {"TmplBlock"}
	Expr1                              -> BlockStat
	
	Expr1                                     -> ResultExpr
	Bindings "=>" Block                       -> ResultExpr {"ResultExpr"}
	"implicit" Id ":" CompoundType "=>" Block -> ResultExpr {"ImplicitIdResultExpr"}
	Id ":" CompoundType "=>" Block            -> ResultExpr {"IdResultExpr"}
	"_" ":" CompoundType "=>" Block           -> ResultExpr {"WildcardResultExpr"}
	
  	Generator (Semi Enumerator)* -> Enumerators {"Enumerators"}
  	
	Generator               -> Enumerator
	Guard                   -> Enumerator
	"val" Pattern1 "=" Expr -> Enumerator {"ValEnum"}
	
	Pattern1 "<-" Expr Guard? -> Generator {"Generator"}
	
	"case" Pattern Guard? "=>" Block -> CaseClause {"CaseClause"}
	
	"if" PostfixExpr -> Guard {"Guard"}
	
	{Pattern1 "|"}+ -> Pattern {"Pattern"}
	
	VarId ":" TypePat -> Pattern1 {"VarPattern"}
	"_" ":" TypePat   -> Pattern1 {"WildcardPattern"}
	Pattern2          -> Pattern1
	
	VarId ("@" Pattern3)? -> Pattern2 {"VarAtPattern"}
	Pattern3              -> Pattern2
	
	SimplePattern                         -> Pattern3
	SimplePattern (Id Nl? SimplePattern)* -> Pattern3 {"Pattern3"}
	
	"_"                                                   -> SimplePattern {"WildcardPattern"}
	VarId                                                 -> SimplePattern
	Literal                                               -> SimplePattern
	StableId                                              -> SimplePattern
	StableId "(" Patterns? ")"                            -> SimplePattern {"SimplePattern"}
	StableId "(" (Patterns ",")? (VarId "@")? "_" "*" ")" -> SimplePattern {"WildStarPattern"}
	"(" Patterns? ")"                                     -> SimplePattern {"BracePatterns"}
	
	{Pattern ","}+ -> Patterns {"Patterns"}
	"_"*           -> Patterns {"WildcardsPattern"}
	
	"[" {VariantTypeParam ","}+ "]" -> TypeParamClause {"TypeParamClause"}
	
	"[" {TypeParam ","}+ "]" -> FunTypeParamClause {"FunTypeParamClause"}
	
	Annotation* "+" TypeParam -> VariantTypeParam {"PlusVariantTypeParam"}
	Annotation* "-" TypeParam -> VariantTypeParam {"MinusVariantTypeParam"}
	Annotation* TypeParam     -> VariantTypeParam {"VariantTypeParam"}
	
	Id TypeParamClause? (">:" Type)? ("<:" Type)?  -> TypeParam {"IdTypeParam"}
	"_" TypeParamClause? (">:" Type)? ("<:" Type)? -> TypeParam {"WildcardTypeParam"}
	("<%" Type)* (":" Type)*                              -> TypeParam {"PercentTypeParam"}
	
	ParamClause* Nl? "(" "implicit" {Param ","}+ ")" -> ParamClauses {"ImplicitParamClauses"}
	ParamClause*                                     -> ParamClauses {"ParamClauses"}
	
	Nl? "(" {Param ","}* ")" -> ParamClause {"ParamClause"}
	
	Annotation* Id (":" ParamType)? ("=" Expr)? -> Param {"Param"}
	
	Type      -> ParamType
	"=>" Type -> ParamType {"ArrowParam"}
	Type "*"  -> ParamType {"StarParam"}
	
	ClassParamClause* Nl? "(" "implicit" {ClassParam ","}+ ")" -> ClassParamClauses {"ImplicitClassParamClauses"}
	ClassParamClause*                                          -> ClassParamClauses {"ClassParamClauses"}
	
	Nl? "(" {ClassParam ","}* ")" -> ClassParamClause {"ClassParamClause"}
	
	Annotation* Modifier* "val" Id ":" ParamType "=" Expr -> ClassParam {"ModifierValDefaultClassParam"}
	Annotation* Modifier* "var" Id ":" ParamType "=" Expr -> ClassParam {"ModifierVarDefaultClassParam"}
	Annotation* Modifier* "val" Id ":" ParamType          -> ClassParam {"ModifierValClassParam"}
	Annotation* Modifier* "var" Id ":" ParamType          -> ClassParam {"ModifierVarClassParam"}
	Annotation* Id ":" ParamType "=" Expr                 -> ClassParam {"DefaultClassParam"}
	Annotation* Id ":" ParamType                          -> ClassParam {"ClassParam"}
	
	"(" {Binding ","}+ ")" -> Bindings {"Bindings"}
	
	Id (":" Type)?  -> Binding {"IdBinding"}
	"_" (":" Type)? -> Binding {"WildcardBinding"}
	
	LocalModifier  -> Modifier
	AccessModifier -> Modifier
	"override"     -> Modifier {"OverrideModifier"}
	
	"abstract" -> LocalModifier {"AbstractModifier"}
	"final"    -> LocalModifier {"FinalModifier"}
	"sealed"   -> LocalModifier {"SealedModifier"}
	"implicit" -> LocalModifier {"ImplicitModifier"}
	"lazy"     -> LocalModifier {"LazyModifier"}

	"private" AccessQualifier?   -> AccessModifier {"PrivateAccessModifier"}
	"protected" AccessQualifier? -> AccessModifier {"ProtectedAccessModifier"}
	
	"[" Id "]"     -> AccessQualifier {"IdAccessQualifier"}
	"[" "this" "]" -> AccessQualifier {"ThisAccessQualifier"}
	
	"@" SimpleType ArgumentExprs* -> Annotation {"Annotation"}
	
	"@" SimpleType ArgumentExprs -> ConstrAnnotation {"ConstrAnnotation"}
	
	"val" Id "=" PrefixExpr -> NameValuePair {"NameValuePair"}
  
  	Nl? "{" SelfType? TemplateStat (Semi TemplateStat)* "}" -> TemplateBody {"TemplateBody"}
  	
	Import                          -> TemplateStat
	(Annotation Nl?)* Modifier* Def -> TemplateStat {"DefTemplate"}
	(Annotation Nl?)* Modifier* Dcl -> TemplateStat {"DclTemplate"}
	Expr                            -> TemplateStat
	
	Id (":" Type)? "=>"  -> SelfType {"IdSelfType"}
	"this" ":" Type "=>" -> SelfType {"ThisSelfType"}

 	"import" {ImportExpr ","}+ -> Import {"Import"}
 	
 	StableId "." Id              -> ImportExpr {"IdImportExpr"}
 	StableId "." "_"             -> ImportExpr {"WildcardImportExpr"}
 	StableId "." ImportSelectors -> ImportExpr {"SelectorsImportExpr"}
 	
 	"{" {ImportSelector ","}+ "}"     -> ImportSelectors {"ImportSelectors"}
 	"{" (ImportSelector ",")* "_" "}" -> ImportSelectors {"BlankImportSelectors"}
 	
 	Id ("=>" Id)? -> ImportSelector {"ArrowImportSelector"}
 	Id "=>" "_"   -> ImportSelector {"ArrowBlankImportSelector"}
 	Id            -> ImportSelector {"ImportSelector"}
 	
	"val" ValDcl       -> Dcl {"ValDcl"}
	"var" VarDcl       -> Dcl {"VarDcl"}
	"def" FunDcl       -> Dcl {"DefDcl"}
	"type" Nl* TypeDcl -> Dcl {"TypeDcl"}
 	
 	Ids ":" Type -> ValDcl {"ValDcl"}
 	
 	Ids ":" Type -> VarDcl {"VarDcl"}
 	
 	FunSig (":" Type)? -> FunDcl {"FunDcl"}
 	
 	Id FunTypeParamClause? ParamClauses -> FunSig {"FunSig"}
 	
 	Id TypeParamClause? (">:" Type)? ("<:" Type)? -> TypeDcl {"TypeDcl"}
 	
	"val" PatDef -> PatVarDef {"ValDef"}
	"var" VarDef -> PatVarDef {"VarDef"}
	
	PatVarDef          -> Def
	"def" FunDef       -> Def {"FunDef"}
	"type" Nl* TypeDef -> Def {"TypeDef"}
	TmplDef            -> Def
	
	{Pattern2 ","}+ (":" Type)? "=" Expr -> PatDef {"PatDef"}
	
	PatDef               -> VarDef
	Ids ":" Type "=" "_" -> VarDef {"VarDef"}

	FunSig (":" Type)? "=" Expr                     -> FunDef {"ExprFunDef"}
	FunSig Nl? "{" Block "}"                        -> FunDef {"BlockFunDef"}
	"this" ParamClause ParamClauses "=" ConstrExpr  -> FunDef {"ThisAssignFunDef"}
	"this" ParamClause ParamClauses Nl? ConstrBlock -> FunDef {"ThisBlockFunDef"}

	Id TypeParamClause? "=" Type -> TypeDef {"TypeDef"}
	
	"case" "class" ClassDef -> TmplDef {"CaseClassDef"}
	"class" ClassDef -> TmplDef {"ClassDef"}
    "case" "object" ObjectDef -> TmplDef {"CaseObjectDef"}
    "object" ObjectDef -> TmplDef {"ObjectDef"}
    "trait" TraitDef -> TmplDef {"TraitDef"}
    
    Id TypeParamClause? ConstrAnnotation* AccessModifier? ClassParamClauses ClassTemplateOpt -> ClassDef {"ClassDef"}
    
    Id TypeParamClause? TraitTemplateOpt -> TraitDef {"TraitDef"}
    
    Id ClassTemplateOpt -> ObjectDef {"ObjectDef"}
  
  	"extends" ClassTemplate -> ClassTemplateOpt {"ExtendsClassTemplateOpt"}
    "extends" TemplateBody  -> ClassTemplateOpt {"ExtendsTemplateClassTemplateOpt"}
    TemplateBody            -> ClassTemplateOpt {"TemplateClassTemplateOpt"}
                            -> ClassTemplateOpt {"EmptyClassTemplateOpt"}
    
    "extends" TraitTemplate -> TraitTemplateOpt {"ExtendsTraitTemplateOpt"}
    "extends" TemplateBody  -> TraitTemplateOpt {"ExtendsTemplateTraitTemplateOpt"}
    TemplateBody            -> TraitTemplateOpt {"TemplateTraitTemplateOpt"}
                            -> TraitTemplateOpt {"EmptyTraitTemplateOpt"}
    
    EarlyDefs? ClassParents TemplateBody? -> ClassTemplate {"ClassTemplate"}
    
    EarlyDefs? TraitParents TemplateBody? -> TraitTemplate {"TraitTemplate"}
    
    Constr ("with" AnnotType)* -> ClassParents {"ClassParents"}
    
    {AnnotType "with"}+ -> TraitParents {"TraitParents"}
    
    AnnotType ArgumentExprs* -> Constr {"Constr"}
    
    "{" EarlyDef (Semi EarlyDef)* "}" "with" -> EarlyDefs {"EarlyDefs"}
    "{" "}" "with"                           -> EarlyDefs {"EmptyEarlyDefs"}
    
    (Annotation Nl?)* Modifier* PatVarDef -> EarlyDef {"EarlyDef"}
  
  	SelfInvocation -> ConstrExpr
  	ConstrBlock    -> ConstrExpr
  	
  	"{" SelfInvocation (Semi BlockStat)* "}" -> ConstrBlock {"ConstrBlock"}
  	
  	"this" ArgumentExprs+ -> SelfInvocation {"SelfInvocation"}
  	
  	TopStat (Semi TopStat)* -> TopStatSeq {"TopStats"}
  	
	(Annotation Nl?)* Modifier* TmplDef -> TopStat {"TopStat"}
	Import                              -> TopStat
	Packaging                           -> TopStat
	PackageObject                       -> TopStat
    
    "package" QualId Nl? "{" TopStatSeq "}" -> Packaging {"Packaging"}
    
    "package" "object" ObjectDef -> PackageObject {"PackageObject"}
    
    ("package" QualId Semi)* TopStatSeq -> CompilationUnit {"CompilationUnit"}
    
    
