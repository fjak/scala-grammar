module Scala

imports Lexical

exports

  context-free start-symbols

	CompilationUnit

  context-free syntax
	StableId         -> Path
	(Id ".")? "this" -> Path {"This"}

	Id                                          -> StableId
	Path "." Id                                 -> StableId {"Path"}
	%% (Id ".")? "super" ClassQualifier? "." Id -> StableId {"SuperId"}

	{Id "."}+ -> QualId {"QualId"}
	
	"import" {ImportExpr ","}+ -> Import {"Import"}

	%% StableId "." ImportSelectors -> ImportExpr {"SelectorsImportExpr"}
	StableId "." "_"             -> ImportExpr {"WildcardImportExpr"}
	StableId "." Id              -> ImportExpr {"IdImportExpr"}
	
	TopStat                 -> TopStatSeq {"SingleTopStatSeq"}
	TopStat Semi TopStatSeq -> TopStatSeq {"SemiTopStatSeq"}
	TopStat TopStatSeq      -> TopStatSeq {"TopStatSeq", layout("1.last.line < 2.first.line")}
			
	%% (Annotation Nl?)* Modifier* TmplDef -> TopStat {"TopStat"}
	Import                                 -> TopStat
	Packaging                              -> TopStat
	%% PackageObject                       -> TopStat
			
	"{" TopStatSeq? "}" -> TopStat {"Block"}
	
	PackageDeclaration* TopStatSeq -> CompilationUnit {"CompilationUnit"}
	
	"package" QualId ";" -> PackageDeclaration {"SemiPackageDeclaration"}
	"package" QualId EOL -> PackageDeclaration {"PackageDeclaration", enforce-newline}
	
	"package" QualId "{" TopStatSeq "}" -> Packaging {"Packaging", layout("3.first.line - 2.last.line <= num(1)")}
	


