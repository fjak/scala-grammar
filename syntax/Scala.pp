%% Pretty printing table (see also Scala.generated.pp)
[
	Annotation -- H hs=0 [KW["@"] _1 _2],
	Assignment -- H ["=" _1],
	BindingsResultExpr -- V hs=4 [H [_1 "=>"] _2],
	Block.1:iter-star -- _1,
	BlockExpr -- V vs=1 ["{" _1 "}"],
	BlockStatSemi -- H hs=0 [H [_1] _2],
	Block -- V vs=1 [_1],
	Block -- V vs=1 [_1 _2],
	CaseClause -- H ["case" _1 _2 "=>" _3],
	ClassClassTemplateOpt -- "\n" KW["extends"] _1,
	CompilationUnit -- V vs=1 [_1 _2],
	ConstrAnnotation -- H hs=0 [KW["@"] _1 _2],
	DesignatorExpr -- H hs=0 [_1 "." _2],
	IfElseExpr -- V [H ["if" "(" _1 ")" _2] H ["else" _3]],
	ImplicitResultExpr -- V hs=4 [H ["implicit" _1 ":" _2 "=>"] _3],
	Import   -- H [KW["import"] H hs=0 [_1]],
	LowerBoundType -- ">:" _1,
	MatchExpr -- H [_1 "match" V ["{" _2 "}"]],
	PackageDeclaration -- H [KW["package"] H hs=0 [_1 _2]],
	ParamTyped -- H [":" _1],
	Path -- H hs=0 [_1],
	PlusVariantTypeParam -- H hs=0 [_1 "+" _2],
	ProcDef -- _1 KW["{"] V vs=1 [_2] KW["}"],
	SelfTypeTemplateBody -- H hs= 0 ["{" V vs=1 [H [_1] _2] "}"],
	SimpleResultExpr -- V hs=4 [H [_1 _2 "=>"] _3],
	StableId -- H hs=0 [_1 "." _2],
	TemplateBody -- H hs=0 ["\n" V vs=1 ["{" _1 "}"]],
	TemplateClassTemplateOpt -- "\n" KW["extends"] _1,
	TemplateStatSemi -- H hs=0 [H [_1] _2],
	TemplateTraitTemplateOpt -- "\n" KW["extends"] _1,
	TopStatSemi -- H hs=0 [_1 _2],
	TopTmplDef -- H [_1 _2 _3],
	TraitParents -- _1 V [_2],
	TraitTraitTemplateOpt -- "\n" KW["extends"] _1,
	Typed -- H [":" _1],
	TypeParamClause.1:iter-sep -- H hs=0 [_1 KW[","]],
	TypeParamClause -- H hs=0 ["[" _1 "]"],
	TypeParam -- H [_1 _2 _3 _4 _5 _6],
	UpperBoundType -- "<:" _1,
	WildcardResultExpr -- V hs=4 [H ["_" _1 "=>"] _2],
	WithAnnotType -- V [H [KW["with"] _1]]
]
