module Scala-Literals

imports
	Scala-Identifiers
	Scala-Expressions

exports
	lexical syntax
		DecimalNumeral ("L" | "l")? -> IntegerLiteral
		HexNumeral ("L" | "l")?     -> IntegerLiteral
		OctalNumeral ("L" | "l")?   -> IntegerLiteral {prefer}
		"-" IntegerLiteral          -> IntegerLiteral
		
		[0] | NonZeroDigit Digit* -> DecimalNumeral {"Decimal"}
		"0x" HexDigit+ -> HexNumeral {"HexNumeral"}
		[0] OctalDigit+ -> OctalNumeral {"Octal"}
		[0-9]       -> Digit {"Digit"}
		[1-9]       -> NonZeroDigit {"NonZeroDigit"}
		[0-7]       -> OctalDigit {"OctalDigit"}
		[0-9A-Fa-f] -> HexDigit {"HexDigit"}
		
		Digit+ "." Digit+ ExponentPart? FloatType? -> FloatingPointLiteral
		"." Digit+ ExponentPart? FloatType?        -> FloatingPointLiteral
		Digit+ ExponentPart                        -> FloatingPointLiteral
		Digit+ FloatType                           -> FloatingPointLiteral
		Digit+ ExponentPart FloatType              -> FloatingPointLiteral
		"-" FloatingPointLiteral                   -> FloatingPointLiteral
		
		("E" | "e") ("+" | "-")? Digit+ -> ExponentPart
		"F" | "f" | "D" | "d" -> FloatType
		
		"'" PrintableChar "'" -> CharacterLiteral
		"'" CharEscapeSeq "'" -> CharacterLiteral

		[\32-\126]          -> PrintableChar
		[\0-\127] / [\"]    -> CharNoDoubleQuote

		"\\b" | "\\t" | "\\n" | "\\f" | "\\r" | "\\\"" | "\\'" | "\\\\" -> CharEscapeSeq
		"\\" [0-1]? [0-9]? [0-9]                                        -> CharEscapeSeq
		"\\" Digit? Digit? Digit                                        -> CharEscapeSeq
		UnicodeEscape                                                   -> CharEscapeSeq

		"\\" "u" HexDigit HexDigit HexDigit HexDigit -> UnicodeEscape
		
		"\"" StringElement* "\""         -> StringLiteral
		"\"\"\"" MultiLineChars "\"\"\"" -> StringLiteral

		[\32-\126] / [\"\\]        -> StringElement
		CharEscapeSeq              -> StringElement

		("s" | "f" | "raw") "\"" ProcessedStringElement* "\""                  -> ProcessedString
		("s" | "f" | "raw") "\"\"\"" MultiLineProcessedStringElement "\"\"\""  -> ProcessedString


		[\32-\126] / [\"\$\\] -> ProcessedStringElement
		CharEscapeSeq         -> ProcessedStringElement
		Processing            -> ProcessedStringElement

		"$$"                        -> Processing
		"${" ProcessingElement* "}" -> Processing
		"$" IPlainId                -> Processing

		"{" ProcessingElement* "}" -> ProcessingElement
		[\0-\127] / [\{\}\"]       -> ProcessingElement
		ProcessedString            -> ProcessingElement
		StringLiteral              -> ProcessingElement

		([\"]? [\"]? CharNoDoubleQuote)* [\"]* -> MultiLineChars

		([\"]? [\"]? IMultiLineProcessedStringElement)* [\"]* -> MultiLineProcessedStringElement

		Processing         -> IMultiLineProcessedStringElement
		[\0-\127] / [\"\$] -> IMultiLineProcessedStringElement

		[\"]      -> DoubleQuote
		[\"] [\"] -> DoubleDoubleQuote

		"'" IPlainId -> SymbolLiteral

	lexical restrictions
		IntegerLiteral -/- [0-9a-zA-Z]
		Literal -/- [0-9a-zA-Z]
		"true" -/- [a-zA-Z0-9]
		"false" -/- [a-zA-Z0-9]
		DoubleQuote -/- [\"]
		DoubleDoubleQuote -/- [\"]
		
	context-free syntax
		IntegerLiteral       -> Literal {"Int"}
		FloatingPointLiteral -> Literal {"Float"}
		BooleanLiteral       -> Literal
		CharacterLiteral     -> Literal {"Char"}
		StringLiteral        -> Literal {"String"}
		SymbolLiteral        -> Literal {"Symbol"}
		"null"               -> Literal {"Null"}
		ProcessedString      -> Literal {"ProcessedString"}

		"true"  -> BooleanLiteral {"True"}
		"false" -> BooleanLiteral {"False"}
