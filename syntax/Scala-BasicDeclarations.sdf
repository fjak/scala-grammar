module Scala-BasicDeclarations

imports
	Scala-Types
	Scala-Expressions

exports
	context-free syntax
		Val ValDcl  -> Dcl {"ValDclDcl"}
		Var VarDcl  -> Dcl {"VarDclDcl"}
		"def" FunDcl  -> Dcl {"DefDclDcl"}
		"type" TypeDcl -> Dcl {"TypeDclDcl"}
		
		{Id ","}+ ":" Type -> ValDcl {"ValDcl"}
		{Id ","}+ ":" Type -> VarDcl {"VarDcl"}
		Id TypeParamClause? (">:" Type)? ("<:" Type)? -> TypeDcl {"TypeDcl"}
		
		"[" {VariantTypeParam ","}+ "]" -> TypeParamClause {"TypeParamClause"}
		
		Annotation* TypeParam     -> VariantTypeParam {"VariantTypeParam"}
		Annotation* "+" TypeParam -> VariantTypeParam {"PlusVariantTypeParam"}
		Annotation* "-" TypeParam -> VariantTypeParam {"NegVariantTypeParam"}
		
		Id  TypeParamClause? (">:" Type)? ("<:" Type)? TypeViewBound* TypeContextBound* -> TypeParam {"TypeParam"}
		"_" TypeParamClause? (">:" Type)? ("<:" Type)? TypeViewBound* TypeContextBound* -> TypeParam {"WildcardTypeParam"}
		
		"<%" Type -> TypeViewBound {"TypeViewBound"}
		":" Type -> TypeContextBound {"TypeContextBound"}
		
		FunSig ":" Type -> FunDcl {"FunDcl"}
		
		ConstructorName ImplicitParamClauses                    -> FunSig {"FunSig"}
		ConstructorName FunTypeParamClause ImplicitParamClauses -> FunSig {"FunWithTypeParamsSig"}

		"this" -> ConstructorName {"ConstructorName"}
		Id     -> ConstructorName
		
		"[" {TypeParam ","}+ "]" -> FunTypeParamClause {"FunTypeParamClause"}
		
		{Param ","}+ -> Params {"Params"}
		
		Annotation* Id (":" ParamType)?               -> Param {"Param"}
		Annotation* Id (":" ParamType)? AssignOp Expr -> Param {"ParamWithDefVal"}
		
		ParamClauses? ImplicitParams? -> ImplicitParamClauses {"ImplicitParamClauses", layout("2.first.line - 1.last.line < num(2)")}
		
		"(" "implicit" Params ")" -> ImplicitParams {"ImplicitParams"}
		
		ParamClause              -> ParamClauses {"SingleParamClauses"}
		ParamClause ParamClauses -> ParamClauses {"ParamClauses", layout("2.first.line - 1.last.line < num(2)")}
		
		"(" Params? ")" -> ParamClause {"ParamClause"}
		
		