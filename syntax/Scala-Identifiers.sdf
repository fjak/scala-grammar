module Scala-Identifiers

	exports

	lexical syntax
		[A-Z] | [\$] | [\_] -> Upper
		[a-z] -> Lower
		Upper | Lower -> Letter
		[0-9] -> Digit
		[\_] -> USS

		[\!\#\%\&\*\+\-\/\:\<\=\>\?\@\\\^\|\~] -> OpChar

		OpChar+ -> Op

		(Letter | Digit)+ -> NonOpIdRest

		Lower NonOpIdRest? -> VarId
		Upper NonOpIdRest? -> TypeId
		Letter NonOpIdRest? USS -> USSId
		Letter NonOpIdRest? [\_] Op -> OpSuffixId

		USSId -> VarId {reject}
		USSId -> TypeId {reject}

		Op         -> PlainId
		VarId      -> PlainId
		TypeId     -> PlainId
		USSId      -> PlainId
		OpSuffixId -> PlainId

		"abstract"  -> Keyword
		"case"      -> Keyword
		"catch"     -> Keyword
		"class"     -> Keyword
		"def"       -> Keyword
		"do"        -> Keyword
		"else"      -> Keyword
		"extends"   -> Keyword
		"false"     -> Keyword
		"final"     -> Keyword
		"finally"   -> Keyword
		"for"       -> Keyword
		"forSome"   -> Keyword
		"if"        -> Keyword
		"implicit"  -> Keyword
		"import"    -> Keyword
		"lazy"      -> Keyword
		"match"     -> Keyword
		"new"       -> Keyword
		"null"      -> Keyword
		"object"    -> Keyword
		"override"  -> Keyword
		"package"   -> Keyword
		"private"   -> Keyword
		"protected" -> Keyword
		"return"    -> Keyword
		"sealed"    -> Keyword
		"super"     -> Keyword
		"this"      -> Keyword
		"throw"     -> Keyword
		"trait"     -> Keyword
		"try"       -> Keyword
		"true"      -> Keyword
		"type"      -> Keyword
		"val"       -> Keyword
		"var"       -> Keyword
		"while"     -> Keyword
		"with"      -> Keyword
		"yield"     -> Keyword
		"_"         -> Keyword
		":"         -> Keyword
		"="         -> Keyword
		"=>"        -> Keyword
		"<-"        -> Keyword
		"<:"        -> Keyword
		"<%"        -> Keyword
		">:"        -> Keyword
		"#"         -> Keyword
		"@"         -> Keyword
		Keyword     -> PlainId {reject}

	lexical restrictions
		Op -/- [\!\#\%\&\*\+\-\/\:\<\=\>\?\@\\\^\|\~]
		NonOpIdRest -/- [A-Za-z0-9\$]

		VarId  -/- [A-Za-z0-9\$\_]
		TypeId -/- [A-Za-z0-9\$\_]
		USS    -/- [\_A-Za-z0-9\$\!\#\%\&\*\+\-\/\:\<\=\>\?\@\\\^\|\~]

		"val" -/- [a-zA-Z0-9]
		"var" -/- [a-zA-Z0-9]
		"new" -/- [a-zA-Z0-9]

		"=" -/- [\!\#\%\&\*\+\-\/\:\<\=\>\?\@\\\^\|\~]
		":" -/- [\!\#\%\&\*\+\-\/\:\<\=\>\?\@\\\^\|\~]
		"_" -/- [a-zA-Z0-9\_\$]

	context-free syntax
		PlainId -> Id {"Id"}
